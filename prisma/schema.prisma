// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  walletAddress     String   @unique
  username          String?  @unique
  profilePictureUrl String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // World ID verification
  nullifierHash     String?  @unique
  verificationLevel String?
  isVerified        Boolean  @default(false)

  // Messaging
  sentMessages      Message[] @relation("MessageSender")
  receivedMessages  Message[] @relation("MessageReceiver")
  conversations     ConversationParticipant[]

  // Chatbot interactions
  chatbotSessions   ChatbotSession[]

  @@map("users")
}

model Conversation {
  id           String   @id @default(cuid())
  name         String?
  isGroup      Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String   @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime @default(now())
  isAdmin        Boolean  @default(false)

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@map("conversation_participants")
}

model Message {
  id             String    @id @default(cuid())
  content        String
  messageType    MessageType @default(TEXT)
  senderId       String
  receiverId     String?   // For direct messages
  conversationId String?   // For group conversations
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isRead         Boolean   @default(false)
  isEdited       Boolean   @default(false)

  sender       User          @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver     User?         @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  conversation Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model ChatbotSession {
  id        String   @id @default(cuid())
  userId    String
  botType   BotType
  sessionData Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatbotMessage[]

  @@map("chatbot_sessions")
}

model ChatbotMessage {
  id        String   @id @default(cuid())
  sessionId String
  content   String
  isFromBot Boolean
  createdAt DateTime @default(now())

  session ChatbotSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chatbot_messages")
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  AUDIO
  VIDEO
}

enum BotType {
  SUPPORT
  WELLNESS
  FINANCIAL
  GENERAL
} 